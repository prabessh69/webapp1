"use strict";

if (typeof jQuery === "undefined") {
    throw new Error("Bootstrap's JavaScript requires jQuery");
}

(function ($) {
    var version = $.fn.jquery.split(" ")[0].split(".");
    if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1) || version[0] > 3) {
        throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4");
    }
})(jQuery);

(function ($) {
    function getTransitionEnd() {
        var el = document.createElement("bootstrap");
        var transitions = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd otransitionend",
            transition: "transitionend"
        };
        for (var name in transitions) {
            if (el.style[name] !== undefined) {
                return { end: transitions[name] };
            }
        }
        return false;
    }

    $.fn.emulateTransitionEnd = function (duration) {
        var called = false, $el = this;
        $(this).one("bsTransitionEnd", function () {
            called = true;
        });
        setTimeout(function () {
            if (!called) $($el).trigger($.support.transition.end);
        }, duration);
        return this;
    };

    $(function () {
        $.support.transition = getTransitionEnd();
        if ($.support.transition) {
            $.event.special.bsTransitionEnd = {
                bindType: $.support.transition.end,
                delegateType: $.support.transition.end,
                handle: function (event) {
                    if ($(event.target).is(this)) {
                        return event.handleObj.handler.apply(this, arguments);
                    }
                }
            };
        }
    });
})(jQuery);

(function ($) {
    function Alert(element) {
        $(element).on("click", '[data-dismiss="alert"]', this.close);
    }

    Alert.VERSION = "3.3.7";
    Alert.TRANSITION_DURATION = 150;

    Alert.prototype.close = function (event) {
        var $this = $(this);
        var selector = $this.attr("data-target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
        }

        var $parent = $(selector === "#" ? [] : selector);
        if (event) event.preventDefault();
        if (!$parent.length) {
            $parent = $this.closest(".alert");
        }
        $parent.trigger(event = $.Event("close.bs.alert"));
        if (event.isDefaultPrevented()) return;

        $parent.removeClass("in");

        function removeElement() {
            $parent.detach().trigger("closed.bs.alert").remove();
        }

        $.support.transition && $parent.hasClass("fade") ?
            $parent.one("bsTransitionEnd", removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION) :
            removeElement();
    };

    function Plugin(option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("bs.alert");
            if (!data) $this.data("bs.alert", (data = new Alert(this)));
            if (typeof option === "string") data[option].call($this);
        });
    }

    var old = $.fn.alert;
    $.fn.alert = Plugin;
    $.fn.alert.Constructor = Alert;

    $.fn.alert.noConflict = function () {
        $.fn.alert = old;
        return this;
    };

    $(document).on("click.bs.alert.data-api", '[data-dismiss="alert"]', Alert.prototype.close);
})(jQuery);

// Other components such as Buttons, Carousels, Collapse, Dropdowns, Modals, etc., can be added here following the same pattern.

(function ($) {
    function Button(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Button.DEFAULTS, options);
        this.isLoading = false;
    }

    Button.VERSION = "3.3.7";
    Button.DEFAULTS = { loadingText: "loading..." };

    Button.prototype.setState = function (state) {
        var disabled = "disabled";
        var method = this.$element.is("input") ? "val" : "html";
        var data = this.$element.data();
        state += "Text";

        if (data.resetText == null) this.$element.data("resetText", this.$element[method]());
        setTimeout($.proxy(function () {
            this.$element[method](data[state] == null ? this.options[state] : data[state]);
            if (state === "loadingText") {
                this.isLoading = true;
                this.$element.addClass(disabled).attr(disabled, disabled).prop(disabled, true);
            } else if (this.isLoading) {
                this.isLoading = false;
                this.$element.removeClass(disabled).removeAttr(disabled).prop(disabled, false);
            }
        }, this), 0);
    };

    Button.prototype.toggle = function () {
        var isActive = this.$element.hasClass("active");
        this.$element.attr("aria-pressed", !isActive);
        this.$element.toggleClass("active");
    };

    function Plugin(option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("bs.button");
            var options = typeof option === "object" && option;

            if (!data) $this.data("bs.button", (data = new Button(this, options)));
            if (option === "toggle") data.toggle();
            else if (option) data.setState(option);
        });
    }

    var old = $.fn.button;
    $.fn.button = Plugin;
    $.fn.button.Constructor = Button;

    $.fn.button.noConflict = function () {
        $.fn.button = old;
        return this;
    };

    $(document).on("click.bs.button.data-api", '[data-toggle^="button"]', function (event) {
        var $btn = $(event.target).closest(".btn");
        Plugin.call($btn, "toggle");
        if (!$(event.target).is('input[type="radio"], input[type="checkbox"]')) {
            event.preventDefault();
        }
    });
})(jQuery);
